{{- if eq .Values.nserver.type "internal" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: nserver-script
data:
  notify.py: |-
    #!/usr/bin/env python
# Copyright 2022 flashcat.cloud | 快猫星云
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
    # -*- coding: UTF-8 -*-
    import sys
    import json
    
    class Sender(object):
        @classmethod
        def send_email(cls, payload):
            # already done in go code
            pass
    
        @classmethod
        def send_wecom(cls, payload):
            # already done in go code
            pass
    
        @classmethod
        def send_dingtalk(cls, payload):
            # already done in go code
            pass
    
        @classmethod
        def send_feishu(cls, payload):
            # already done in go code
            pass
    
        @classmethod
        def send_sms(cls, payload):
            users = payload.get('event').get("notify_users_obj")
            phones = {}
            for u in users:
                if u.get("phone"):
                    phones[u.get("phone")] = 1
            if phones:
                print("send_sms not implemented, phones: {}".format(phones.keys()))
    
        @classmethod
        def send_voice(cls, payload):
            users = payload.get('event').get("notify_users_obj")
            phones = {}
            for u in users:
                if u.get("phone"):
                    phones[u.get("phone")] = 1
            if phones:
                print("send_voice not implemented, phones: {}".format(phones.keys()))
    
    def main():
        payload = json.load(sys.stdin)
        with open(".payload", 'w') as f:
            f.write(json.dumps(payload, indent=4))
        for ch in payload.get('event').get('notify_channels'):
            send_func_name = "send_{}".format(ch.strip())
            if not hasattr(Sender, send_func_name):
                print("function: {} not found", send_func_name)
                continue
            send_func = getattr(Sender, send_func_name)
            send_func(payload)
    
    def hello():
        print("hello nightingale")
    
    if __name__ == "__main__":
        if len(sys.argv) == 1:
            main()
        elif sys.argv[1] == "hello":
            hello()
        else:
            print("I am confused")
{{- end -}}
